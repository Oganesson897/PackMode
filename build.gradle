plugins {
    id 'java'
    id 'java-library'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.35'
}

base {
    archivesName.set(modBaseName)
}

version = project.modVersion

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
        vendor.set(JvmVendorSpec.AZUL)
    }
}

minecraft {
    mcVersion.set("1.12.2")

    mcpMappingChannel.set("snapshot") // Mapping Channel
    mcpMappingVersion.set(mcpVersion) // Mapping Version

    username.set("Developer") // Test runtime player name
}

repositories {
    mavenCentral()
    maven {
        name 'CraftTweaker'
        url 'https://maven.blamejared.com'
    }
    maven {
        name "GameStages"
        url "https://maven.mcmoddev.com"
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'

    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crafttweakerVersion}"
    implementation("net.darkhax.gamestages:GameStages-1.12.2:${gameStageVersion}") {
        exclude module: "crafttweaker"
    }
    implementation "net.darkhax.bookshelf:Bookshelf-1.12.2:${bookShelfVersion}"
}

jar {
    manifest {
        def attribute_map = [:]
        attribute_map['FMLCorePlugin'] = "io.sommers.packmode.core.PackModeCore"
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        def currentTasks = gradle.startParameter.taskNames
        if (currentTasks[0] == 'build' || currentTasks[0] == 'prepareObfModsFolder' || currentTasks[0] == 'runObfClient') {
            attribute_map['ForceLoadAsMod'] = true
        }
        attributes(attribute_map)
    }
}

processResources {
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    inputs.property "version", project.version
    inputs.property "mcversion", minecraftVersion

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        expand "version": project.version, "mcversion": minecraftVersion
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (it.name in ['compileMcLauncherJava', 'compilePatchedMcJava']) {
        return
    }
    sourceCompatibility = 17
    options.release.set(8)
    javaCompiler.set(javaToolchains.compilerFor {
        languageVersion.set(JavaLanguageVersion.of(16))
        vendor.set(JvmVendorSpec.AZUL)
    })
}